From 3fdd047df6c3347e23f9c8bd0c12fe7c8f5e8bd0 Mon Sep 17 00:00:00 2001
From: Luca Bacci <luca.bacci982@gmail.com>
Date: Mon, 22 Apr 2024 16:31:16 +0200
Subject: [PATCH 09/10] GdkWin32: Use WindowFromPoint to find DND target window

---
 gdk/win32/gdkdnd-win32.c | 82 +++++++++++-----------------------------
 1 file changed, 22 insertions(+), 60 deletions(-)

diff --git a/gdk/win32/gdkdnd-win32.c b/gdk/win32/gdkdnd-win32.c
index 51de498..62a651e 100644
--- a/gdk/win32/gdkdnd-win32.c
+++ b/gdk/win32/gdkdnd-win32.c
@@ -1974,43 +1974,6 @@ gdk_drag_get_protocol_for_display (GdkDisplay      *display,
   return 0;
 }
 
-typedef struct {
-  gint x;
-  gint y;
-  HWND ignore;
-  HWND result;
-} find_window_enum_arg;
-
-static BOOL CALLBACK
-find_window_enum_proc (HWND   hwnd,
-                       LPARAM lparam)
-{
-  RECT rect;
-  POINT tl, br;
-  find_window_enum_arg *a = (find_window_enum_arg *) lparam;
-
-  if (hwnd == a->ignore)
-    return TRUE;
-
-  if (!IsWindowVisible (hwnd))
-    return TRUE;
-
-  tl.x = tl.y = 0;
-  ClientToScreen (hwnd, &tl);
-  GetClientRect (hwnd, &rect);
-  br.x = rect.right;
-  br.y = rect.bottom;
-  ClientToScreen (hwnd, &br);
-
-  if (a->x >= tl.x && a->y >= tl.y && a->x < br.x && a->y < br.y)
-    {
-      a->result = hwnd;
-      return FALSE;
-    }
-  else
-    return TRUE;
-}
-
 void
 gdk_drag_find_window_for_screen (GdkDragContext  *context,
 				 GdkWindow       *drag_window,
@@ -2020,42 +1983,41 @@ gdk_drag_find_window_for_screen (GdkDragContext  *context,
 				 GdkWindow      **dest_window,
 				 GdkDragProtocol *protocol)
 {
-  GdkWindow *dw;
-  find_window_enum_arg a;
+  GdkWindow *toplevel = NULL;
+  HWND hwnd;
+  POINT pt;
 
-  a.x = x_root - _gdk_offset_x;
-  a.y = y_root - _gdk_offset_y;
-  a.ignore = drag_window ? GDK_WINDOW_HWND (drag_window) : NULL;
-  a.result = NULL;
+  pt.x = x_root - _gdk_offset_x;
+  pt.y = y_root - _gdk_offset_y;
 
-  EnumWindows (find_window_enum_proc, (LPARAM) &a);
+  hwnd = WindowFromPoint (pt);
 
-  if (a.result == NULL)
-    *dest_window = NULL;
-  else
+  if (hwnd)
     {
-      dw = gdk_win32_handle_table_lookup (a.result);
-      if (dw)
+      GdkWindow *window = gdk_win32_handle_table_lookup (hwnd);
+      if (window)
         {
-          *dest_window = gdk_window_get_toplevel (dw);
-          g_object_ref (*dest_window);
+          toplevel = gdk_window_get_toplevel (window);
+          g_object_ref (toplevel);
         }
       else
-        *dest_window = gdk_window_foreign_new_for_display (_gdk_display, a.result);
-
-      if (use_ole2_dnd)
-        *protocol = GDK_DRAG_PROTO_OLE2;
-      else if (context->source_window)
-        *protocol = GDK_DRAG_PROTO_LOCAL;
-      else
-        *protocol = GDK_DRAG_PROTO_WIN32_DROPFILES;
+        toplevel = gdk_window_foreign_new_for_display (_gdk_display, hwnd);
     }
 
+  *dest_window = toplevel;
+
+  if (use_ole2_dnd)
+    *protocol = GDK_DRAG_PROTO_OLE2;
+  else if (context->source_window)
+    *protocol = GDK_DRAG_PROTO_LOCAL;
+  else
+    *protocol = GDK_DRAG_PROTO_WIN32_DROPFILES;
+
   GDK_NOTE (DND,
 	    g_print ("gdk_drag_find_window: %p %+d%+d: %p: %p %s\n",
 		     (drag_window ? GDK_WINDOW_HWND (drag_window) : NULL),
 		     x_root, y_root,
-		     a.result,
+		     hwnd,
 		     (*dest_window ? GDK_WINDOW_HWND (*dest_window) : NULL),
 		     _gdk_win32_drag_protocol_to_string (*protocol)));
 }
-- 
2.39.1.windows.1

